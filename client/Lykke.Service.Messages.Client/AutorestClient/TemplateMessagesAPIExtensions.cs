// Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace swagger
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TemplateMessagesAPI.
    /// </summary>
    public static partial class TemplateMessagesAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object IsAlive(this ITemplateMessagesAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this ITemplateMessagesAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ApiTemplateGet(this ITemplateMessagesAPI operations)
            {
                operations.ApiTemplateGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiTemplateGetAsync(this ITemplateMessagesAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTemplateGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='template'>
            /// </param>
            public static void ApiTemplatePost(this ITemplateMessagesAPI operations, TemplateModel template = default(TemplateModel))
            {
                operations.ApiTemplatePostAsync(template).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='template'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiTemplatePostAsync(this ITemplateMessagesAPI operations, TemplateModel template = default(TemplateModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTemplatePostWithHttpMessagesAsync(template, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='templateId'>
            /// </param>
            public static void ApiTemplateByTemplateIdGet(this ITemplateMessagesAPI operations, System.Guid templateId)
            {
                operations.ApiTemplateByTemplateIdGetAsync(templateId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='templateId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiTemplateByTemplateIdGetAsync(this ITemplateMessagesAPI operations, System.Guid templateId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTemplateByTemplateIdGetWithHttpMessagesAsync(templateId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='merchantId'>
            /// </param>
            public static void ApiTemplateMerchantIdByMerchantIdGet(this ITemplateMessagesAPI operations, string merchantId)
            {
                operations.ApiTemplateMerchantIdByMerchantIdGetAsync(merchantId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='merchantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiTemplateMerchantIdByMerchantIdGetAsync(this ITemplateMessagesAPI operations, string merchantId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTemplateMerchantIdByMerchantIdGetWithHttpMessagesAsync(merchantId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
